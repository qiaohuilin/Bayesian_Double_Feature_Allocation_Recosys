50*1.1*0.1+50*1.1^2*0.2+50*1.1^3*0.15
40*1.2*0.05+40*1.2^2*0.25+40*1.2^3*0.3
70*1.05*0.15+70*1.05^2*0.1+70*1.05^3*0.05
A=matrix(c(2,3/2,-1,-0.5),2,2,byrow = T)
A
trace(A)*3
tr(A)*3
library(Matrix)
tr(A)*3
tr(A)*3
trace(A)*3
sum(diag(A))
sum(diag(A))*3
1/4*0.2+1/7*0.1+1/9*1/12
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
library(ggplot2)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut),stat = 'identity')
diamonds %>% colnames()
diamonds %>% glimpse()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=price),stat = 'identity')
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=price),stat = 'identity')+
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "navy")) +
xlab("Item Type") + ylab("Item Outlet Sales")+
ggtitle("Cut vs Price")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=price),stat = 'identity')+
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "navy")) +
xlab("Cut") + ylab("Price")+
ggtitle("Cut vs Price")
band_instruments %>% rename(Name=name) -> band_instruments
band_instruments %>% colnames()
left_join(band_members,band_instruments2,by=('name'='Name'))
left_join(band_members,band_instruments2,by=c('name'='Name'))
left_join(band_members,band_instruments,by=c('name'='Name'))
iris %>% mutate(Sepal.Rate=Sepal.Length/Sepal.Width) -> data
data %>% rename(rate=Sepal.Rate) -> data
data %>% arrange(desc(Sepal.Length)) ->
data
data
data %>% filter(Species=='setosa')
data %>% filter(Species=='setosa' & Sepal.Length>2)
data %>% filter(Species=='setosa' & Sepal.Length>2) %>% nrow()
data %>% group_by(Species) %>% summarise(count=n(),avg_l=mean(Sepal.Length))
data %>% group_by(Species) %>% summarise(count=n(),avg_l=mean(Sepal.Length))-> data2
data2
data %>% group_by(Species) %>% summarise(count=n(),avg_l=mean(Sepal.Length))%>% data.frame() ->data2
data2
combi
substr(data$Sepal.Length,1,2)
substr(data$Species,1,2)
table(q)
unique(q)
substr(data$Species,1,2) -> q
table(q)
q <- gsub("se","SE",q)
q <- gsub("ve","VE",q)
q <- gsub("vi","VI",q)
data$Sepal.Length = q
library(dummies)
install.packages('dummies')
library(dummies)
combi <- dummy.data.frame(combi, names = c('Outlet_Size','Outlet_Location_Type','Outlet_Type', 'Item_Type_New'),  sep='_')
# label encoding and one-hot encoding
library(dummies)
dummy.data.frame(combi)
dummy.data.frame
mtcars
glimpse(mtcars)
glimpse(mpg)
unique(mpg$class)
unique(mpg$drv)
ifelse(mpg$drv=='f',1,0)
# label encoding and one-hot encoding
# two-level label
mpg$drv = ifelse(mpg$drv=='f',1,0)
# one-hot encoding
model.matrix(mpg$class)
# one-hot encoding
model.matrix(class,mpg)
# one-hot encoding
model.matrix(as.factor(class),mpg)
# one-hot encoding
model.matrix(~class,mpg)
# one-hot encoding
m=model.matrix(~class,mpg)
dim(m)
unique(class)
unique(mpg$class)
colnames(m)
m=model.matrix(~-1+class,mpg)
colnames(m)
rowSums(m)
data %>% filter(!is.na(Sepal.Length))
data %>% group_by(Species) %>% summarise(Count=n(),c_uniq=n_distinct(),avg_sl=mean(Sepal.Length)) %>%
data.frame() ->data2
data %>% group_by(Species) %>% summarise(Count=n(),c_uniq=n_distinct(Sepal.Length),avg_sl=mean(Sepal.Length)) %>%
data.frame() ->data2
data %>% group_by(Species) %>% summarise(Count=n(),avg_sl=mean(Sepal.Length)) %>%
data.frame() ->data2
data=iris
data %>% group_by(Species) %>% summarise(Count=n(),avg_sl=mean(Sepal.Length)) %>%
data.frame() ->data2
data %>% group_by(Species) %>% summarise(Count=n(),c_uniq=n_distinct(Sepal.Length),avg_sl=mean(Sepal.Length)) %>%
data.frame() ->data2
data %>% group_by(Species) %>% summarise(Count=n(),c_uq=n_distinct(Sepal.Length),avg_sl=mean(Sepal.Length)) %>%
data.frame() ->data2
data2
data %>% slice(5:10)
data %>% slice_sample(5)
data %>% slice_sample(n = 5)
data %>% slice_sample(prop = 0.1)
starwars %>% select(start_with("Sepal"))
starwars %>% select(starts_with("Sepal"))
data %>% select(starts_with("Sepal"))
data %>% transmute(st_pl=(Sepal.Length-mean(Sepal.Length))/sqrt(var(Sepal.Length)))
data %>% transmute(log_pl=log(Sepal.Length))
colnames(data)
data %>% relocate(Sepal.Length:Sepal.Width,.before = Species)
data %>% relocate(Sepal.Length:Sepal.Width,.before = Species) %>% colnames()
sample = sample.split(data, SplitRatio = .75)
library(randomForest)
library(caTool)
install.packages('randomForest')
library(randomForest)
library(caTool)
install.packages("caTool")
library(caTool)
sample = sample.split(data, SplitRatio = .75)
install.packages("caTools")
library(caTools)
sample = sample.split(data, SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
dim(train)
dim(test)
sample
sample = sample.split(data, SplitRatio = .5)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
dim(train)
dim(test)
sample = sample.split(data, SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
dim(train)
dim(test)
90/150
lm(Sepal.Length~.,data=iris)
lm_model=lm(Sepal.Length~.,data=iris)
summary(lm_model)
glm(Species~.,data=iris,family='categorical')
sample = sample.split(data, SplitRatio = 1)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
dim(train)
dim(test)
sample = sample.split(data, SplitRatio = 2/3)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
dim(train)
dim(test)
sample = sample.split(data, SplitRatio = 3/2)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
dim(train)
dim(test)
sample = sample.split(data, SplitRatio = 0.75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
dim(train)
dim(test)
lm_model=lm(Sepal.Length~.,data=train)
summary(lm_model)
predict(test,lm_model)
?predict
predict(lm_model,test)
source('~/.active-rstudio-document', echo=TRUE)
glm(Species~.,data=iris,family='binomial')
glm(Species~.,data=iris,family=binomial())
data %>% mutate(y=ifelse(Species=='setosa',1,0)) ->data
data$y
glm(y~.,data=data,family=binomial())
library(tree)
install.packages('tree')
library(tree)
data(cpus, package="MASS")
cpus.ltr <- tree(log10(perf) ~ ., data=cpus)
data(cpus, package="MASS")
cpus.ltr <- tree(log10(perf) ~ syct + mmin + mmax + cach
+ chmin + chmax, data=cpus)
cv.tree(cpus.ltr, , prune.tree)
cv.tree(cpus.ltr,K=5, prune.tree)
cv.tree(cpus.ltr,, prune.tree,K=5)
cpus.ltr
misclass.tree(cpus.ltr)
predict(cpus.ltr,cpus)
deviance.tree(cpus.ltr)
deviance.tree
deviance.tree (cpus.ltr)
plot.tree(cpus.ltr)
install.packages('tree')
install.packages("tree")
library(tree)
plot.tree(cpus.ltr)
plot.tree.sequence(cpus.ltr)
plot(lm_model)
par(mar=c(2,2,1,1))
plot(lm_model)
library(caret)
install.packages('caret')
library(caret)
#setting the tree control parameters
fitControl <- trainControl(method = "cv", number = 5)
cartGrid <- expand.grid(.cp=(1:50)*0.01)
n=1:dim(cpus)[1]
sample_id=sample(1:n,round(0.8*n),replace=F)
sample_id=sample(1:n,round(0.8*n))
?sample
sample(1:n,1)
sample_id=sample(round(0.8*n),1:n,replace=F)
n=1:dim(cpus)[1]
sample_id=sample(round(0.8*n),1:n,replace=F)
round(0.8*n)
n=dim(cpus)[1]
sample_id=sample(round(0.8*n),1:n,replace=F)
sample_id
round(0.8*n)
sample_id=sample(round(0.8*n),1:n,replace=F)
sample_id
sample_id=sample(1,1:n,replace=F)
sample(1,1:n,replace=F)
sample(1,1:10)
sample(5,1:10)
sample(1:10,5)
sample_id=sample(1:n,round(0.8*n),replace=F)
train=cpus[sample_id,]
test=cpus[-sample_id,]
data %>% slice_sample(prop=0.8) -> train
data-train
data[-train,]
n=dim(cpus)[1]
sample_id=sample(1:n,round(0.8*n),replace=F)
train=cpus[sample_id,]
test=cpus[-sample_id,]
dim(train)
dim(test)
#decision tree
tree_model <- train(log10(perf) ~ syct + mmin + mmax + cach
+ chmin + chmax,, data = train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid)
print(tree_model)
pre_score <- predict(tree, type = "vector")
pre_score <- predict(tree_model, type = "vector")
main_tree <- rpart(log10(perf) ~ syct + mmin + mmax + cach
+ chmin + chmax,, data = train, control = rpart.control(cp=0.01))
main_tree <- rpart(log10(perf) ~ syct + mmin + mmax + cach
+ chmin + chmax, data = train, control = rpart.control(cp=0.01))
main_tree <- train(log10(perf) ~ syct + mmin + mmax + cach
+ chmin + chmax, data = train, method = "rpart",control = rpart.control(cp=0.01))
main_tree <- train(log10(perf) ~ syct + mmin + mmax + cach
+ chmin + chmax,, data = train, method = "rpart",control = rpart.control(cp=0.01))
#decision tree
tree_model <- train(log10(perf) ~ syct + mmin + mmax + cach
+ chmin + chmax,, data = train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid)
print(tree_model)
#decision tree
tree_model <- train(log10(perf) ~ syct + mmin + mmax + cach
+ chmin + chmax, data = train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid)
print(tree_model)
main_tree <- train(log10(perf) ~ syct + mmin + mmax + cach
+ chmin + chmax, data = train, method = "rpart",control = rpart.control(cp=0.01))
main_tree <- train(log10(perf) ~ syct + mmin + mmax + cach
+ chmin + chmax, data = train, control = rpart.control(cp=0.01))
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
dim(train)
#decision tree
tree_model <- train(Sepal.Length~., data = train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid)
print(tree_model)
n=dim(data)[1]
sample_id=sample(1:n,round(0.8*n),replace=F)
train=data[sample_id,]
test=data[-sample_id,]
#decision tree
tree_model <- train(Sepal.Length~., data = train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid)
print(tree_model)
main_tree <- train(Sepal.Length~., data = train, method = "rpart", control = rpart.control(cp=0.01))
library(rpart)
main_tree <- rpart(Sepal.Length~., data = train, method = "rpart", control = rpart.control(cp=0.01))
main_tree <- rpart(Sepal.Length~., data = train, control = rpart.control(cp=0.01))
pre_score <- predict(main_tree, type = "vector")
pre_score
rmse(train$Sepal.Length, pre_score)
library(e1071)
rmse(train$Sepal.Length, pre_score)
library(rpart.plot)
install.packages(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
rmse(train$Sepal.Length, pre_score)
prp(main_tree)
library(Metrics)
install.packages("Metrics")
library(Metrics)
rmse(train$Sepal.Length, pre_score)
library(randomForest)
control <- trainControl(method = "cv", number = 5)
#random forest model
rf_model <- train(Item_Outlet_Sales ~ ., data = new_train, method = "parRF", trControl =                 control, prox = TRUE, allowParallel = TRUE)
#random forest model
rf_model <- train(Sepal.Length ~ ., data = train, method = "parRF", trControl =                 control, prox = TRUE, allowParallel = TRUE)
#random forest model
rf_model <- train(Sepal.Length ~ ., data = train, method = "parRF", trControl =                 control, prox = TRUE, allowParallel = TRUE)
#check optimal parameters
print(rf_model)
#mtry is the number of variables taken at each split to build a tree
forest_model <- randomForest(Sepal.Length~., data = train, mtry = 6, ntree = 100)
#mtry is the number of variables taken at each split to build a tree
forest_model <- randomForest(Sepal.Length~., data = train, method = "parRF", mtry = 6, ntree = 100)
#mtry is the number of variables taken at each split to build a tree
forest_model <- randomForest(Sepal.Length~., data = train, mtry = 6, ntree = 100,prox = TRUE, allowParallel = TRUE)
#mtry is the number of variables taken at each split to build a tree
forest_model <- randomForest(Sepal.Length~., data = train, mtry = 4, ntree = 100,prox = TRUE, allowParallel = TRUE)
print(forest_model)
varImpPlot(forest_model)
main_predict <- predict(main_tree, newdata = test, type = "vector")
main_predict
tb=readxl::read_xlsx("~/Downloads/Fall 2021 Career Fair Employers Quick View.xlsx")
head(tb)
tb %>% data.frame() -> tb
head(tb)
tb %>% filter(Data=='x')
tb %>% filter(Data=='x' | Business=='x')
tb %>% filter(Data=='x' | Business=='x') %>% nrow()
tb %>% filter(Data=='x' | Business=='x') %>% select(-c(Healthcare.Research,Software.Engineering)) -> tb
dim(tb)
View(tb)
library(dplyr)
library(tidyr)
data=iris
data %>% head()
data %>% colnames()
data %>% summary()
data %>% glimpse()
data %>% nrows()
data %>% nrow()
data %>% ncol()
data %>% slice(5:10)
data %>% slice (prop=0.1)
data %>% slice_sample(n = 10)
data %>% slice_sample(prop = 0.1)
data %>% arrange(desc(Sepal.Length))
data %>% select(Sepal.Length)
data %>% select(-Sepal.Length)
data %>% select(c(Sepal.Length,Sepal.Width))
data %>% select(-c(Sepal.Length,Sepal.Width))
data %>% mutate(Sepal.Rate=Sepal.Length/Sepal.Width)
data %>% mutate(Sepal.Rate=Sepal.Length/Sepal.Width) -> data
data %>% mutate(Species=as.factor(Species))
data %>% transmutate(log_sepallength=log(Sepal.Length))
data %>% transmute(log_sepallength=log(Sepal.Length))
data %>% rename(rate= Sepal.Rate)
data %>% relocate(Sepal.Length:Sepal.Width,before=Species)
data %>% relocate(Sepal.Length:Sepal.Width,before=Species) %>% colnames()
data %>% relocate(Sepal.Length:Sepal.Width,.before=Species) %>% colnames()
data %>% group_by(Species) %>% summarise(count=n(),avg_spl=mean(Sepal.Length))
data %>% group_by(Species) %>% summarise(count_distc=n_distinct(),avg_spl=mean(Sepal.Length))
data %>% group_by(Species) %>% summarise(count_distc=n_distinct(Sepal.Length),avg_spl=mean(Sepal.Length))
data %>% group_by(Species) %>% summarise(count_distc=n_distinct(Sepal.Length),avg_spl=mean(Sepal.Length)) %>%
data.frame() -> data2
data2
data.filter(!is.na(Sepal.Length))
data %>%  filter(!is.na(Sepal.Length))
data %>% filter(Sepal.Length>3 & Species=='setosa')
data %>% filter(Sepal.Length>3 & Species=='setosa') %>% nrow
data %>% filter(Sepal.Length>3 & Species=='setosa') %>% nrow()
data[data$Sepal.Length>3 & data$Species=='setosa',]
data %>% mutate(sepalchoose=rep(1,dim(data)[1])) ->data
data %>% mutate(sepalchoose=rep(0,dim(data)[1])) ->data
data$sepalchoose[data$Sepal.Length>5]=1
data$sepalchoose
data %>%distinct()
data=mtcars
data %>% distinct(mpg,cyl)
left_join(band_members,band_instruments,by='name')
rm(band_instruments)
band_instruments
left_join(band_members,band_instruments,by='name')
band_instruments %>% rename(Name=name) -> band_instruments
left_join(band_members,band_instruments,by=c('name'='Name'))
inner_join(band_members,band_instruments,by=c('name'='Name'))
full_join(band_members,band_instruments,by=c('name'='Name'))
bind_cols(band_instruments,band_members)
fish_encounters
fish_encounters %>% colnames()
fish_encounters %>% pivot_wider(names_from = station, values_from = seen,
values_fill = 0)
relig_income %>% colnames()
relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
relig_income %>% head()
relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
substr(data$Species,1,2) -> q
q <- gsub("se","SE",q)
q <- gsub("ve","VE",q)
q <- gsub("vi","VI",q)
data$Species = q
#string manipulation
substr(data$Species,1,2) -> q
q <- gsub("se","SE",q)
q <- gsub("ve","VE",q)
q <- gsub("vi","VI",q)
#string manipulation
data=iris
substr(data$Species,1,2) -> q
q <- gsub("se","SE",q)
q <- gsub("ve","VE",q)
q <- gsub("vi","VI",q)
data$Species = q
ifelse(mpg$drv=='f',1,0)
#label encoding - two level
data=mpg
table(data$drv)
glimpse(data)
rm(mpg)
#label encoding - two level
data=mpg
rm(mpg)
glimpse(data)
data$drv=ifelse(data$drv=='f',1,0)
data$drv
# one-hot encoding
m=model.matrix(~class,mpg)
colnames(m)
m=model.matrix(~-1+class,mpg)
colnames(m)
colSums(m)
rowSums(m)
rowSums(m)
# one-hot encoding
m=model.matrix(~class,mpg)
colnames(m)
rowSums(m)
m[,1]
library(ggplot2)
ggplot(data=mpg)+
geom_point(mapping = aes(x=mpg,y=disp,color=cyl))
ggplot(data=mtcars)+
geom_point(mapping = aes(x=mpg,y=disp,color=cyl))
ggplot(data=mtcars)+
geom_point(mapping = aes(x=mpg,y=disp,color=cyl<5))
ggplot(data=mtcars)+
geom_point(mapping = aes(x=mpg,y=disp))+
facet_wrap(~cyl)
ggplot(data=mtcars)+
geom_point(mapping = aes(x=mpg,y=disp))+
facet_wrap(cyl~vs)
ggplot(data=mtcars)+
geom_point(mapping = aes(x=mpg,y=disp))+
facet_grid(cyl~vs)
ggplot(data=mtcars)+
geom_point(mapping = aes(x=mpg,y=disp))+
geom_smooth(mapping = aes(x=mpg,y=disp))
ggplot(data=mtcars)+
geom_smooth(mapping = aes(x=mpg,y=disp,color=cyl))
ggplot(data=mpg)+
geom_smooth(mapping = aes(x=displ,y=hwy,color=cyl))
ggplot(data=mpg)+
geom_smooth(mapping = aes(x=displ,y=hwy,color=drv))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ,y=hwy,color=drv))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ,y=hwy,color=drv))+
geom_smooth(mapping=aes(x=displ,y=hwy))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ,y=hwy,color=drv))+
geom_smooth(mapping=aes(x=displ,y=hwy,color=drv))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ,y=hwy,color=drv))+
geom_smooth(mapping=aes(x=displ,y=hwy,color=drv),se=F)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
ggplot(data=mpg)+
boxplot(mapping=aes(x=class,y=hwy))
ggplot(data=mpg)+
boxplot(mapping=aes(x=class,y=hwy))
mpg$class
ggplot(data=mpg)+
boxplot(mapping=aes(x=class,y=hwy))
ggplot(data = mpg) +
geom_boxplot(mapping= aes(x=class,y=hwy))
ggplot(data=mpg)+
geom_boxplot(mapping=aes(x=class,y=hwy))
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut),stat = 'identity')
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut,y=price),stat = 'identity')
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut,y=clarity),position='dodge')
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut,fill=clarity),position='dodge')
getwd()
setwd("~/Desktop/Peter/code_submit/real-data/")
